import re
import os
import sqlite3
import matplotlib.pyplot as plt

def open_database(db_name):
    path = os.path.dirname(os.path.abspath(__file__))
    conn = sqlite3.connect(path + "/" + db_name)
    cur = conn.cursor()
    return cur, conn

def calculate_title_length_averages_by_source(cur, conn, table_names):
    source_averages_dict = {}
    for table in table_names:  
        try:
            cur.execute(f"SELECT title FROM {table}")
        except:
            return "table not in database"
        titles = cur.fetchall()
        object_title_lengths = [len(title[0].split()) for title in titles]
        average_object_title_length = round(sum(object_title_lengths) / len(object_title_lengths), 2)
        
        #print(table)
        if table == 'Open_Library':
            if table not in source_averages_dict:
                source_averages_dict[table] = {}
            source_averages_dict[table]['medium'] = 'books'
            source_averages_dict[table]['average title length'] = average_object_title_length
        elif table == 'Harvard' or table == 'Met' or table == 'Cleveland':
            if table not in source_averages_dict:
                source_averages_dict[table] = {}
            source_averages_dict[table]['medium'] = 'paintings'
            source_averages_dict[table]['average title length'] = average_object_title_length
        else:
            continue
        
    
    return source_averages_dict

def calculate_title_length_averages_by_medium(cur, conn, source_averages_dict):
    medium_averages_dict = {}
    books_total = 0
    books_source_num = 0
    paintings_total = 0
    paintings_source_num = 0
    
    for source in source_averages_dict:
        if source_averages_dict[source]['medium'] == 'books':
            books_source_num += 1
            books_total += source_averages_dict[source]['average title length']
        elif source_averages_dict[source]['medium'] == 'paintings':
            paintings_source_num += 1
            paintings_total += source_averages_dict[source]['average title length']
        else:
            continue
    books_average = round(books_total / books_source_num, 2)
    paintings_average = round(paintings_total / paintings_source_num, 2)
    medium_averages_dict['Books'] = books_average
    medium_averages_dict['Paintings'] = paintings_average

    return medium_averages_dict

def write_lengths_to_txt_file(source_averages_dict, medium_averages_dict):
    with open("title_lengths.txt", "w") as file:
        for source in source_averages_dict:
            medium = source_averages_dict[source].get('medium', None)
            average = source_averages_dict[source]['average title length']
            if source == 'Open_Library':
                file.write(f"Average title length for {medium} in the {source} table: {average} words\n")
                file.write("\n")
            elif source == 'Harvard' or source == 'Met' or source == 'Cleveland':
                file.write(f"Average title length for {medium} in the {source} table: {average} words\n")
                file.write("\n")
        for medium in medium_averages_dict:
            medium = medium
            average = medium_averages_dict[medium]
            file.write(f"Average title length for all {medium.lower()} in the database: {average} words \n")
            file.write("\n")

def visualize_title_lengths(source_averages_dict, medium_averages_dict):
    sources = list(source_averages_dict.keys())
    source_values = list(source_averages_dict.values())
    source_averages = [value['average title length'] for value in source_values]
    
    mediums = list(medium_averages_dict.keys())
    medium_values = list(medium_averages_dict.values())
    
    figure = plt.figure(1, figsize=(20, 10))
    plot1 = figure.add_subplot(121)
    plot1.bar(sources, source_averages, color=['blue', 'red', 'purple', 'pink'])
    plot1.set_xlabel("Data Source")
    plot1.set_ylabel("Average Artwork Title Length in Words")
    plot1.set_title("Average Artwork Title Length in Words by Data Source")
    
    plot2 = figure.add_subplot(122)
    plot2.bar(mediums, medium_values, color=['green', 'orange'])
    plot2.set_xlabel("Art Medium")
    plot2.set_ylabel("Average Artwork Title Length in Words")
    plot2.set_title("Average Artwork Title Length in Words by Art Medium")
    
    plt.savefig("title_word_lengths_by_medium.png")
    plt.show()
    
    
def main():
    table_names = ['Open_Library', 'Harvard', 'Met', 'Cleveland']
    cur, conn = open_database("Museums.db")
    source_averages_dict = calculate_title_length_averages_by_source(cur, conn, table_names)
    #print(source_averages_dict)
    medium_averages_dict = calculate_title_length_averages_by_medium(cur, conn, source_averages_dict)
    write_lengths_to_txt_file(source_averages_dict, medium_averages_dict)
    visualize_title_lengths(source_averages_dict, medium_averages_dict)

main()
